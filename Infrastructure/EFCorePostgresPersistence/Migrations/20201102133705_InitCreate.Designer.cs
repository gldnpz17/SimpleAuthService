// <auto-generated />
using System;
using EFCorePostgresPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EFCorePostgresPersistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201102133705_InitCreate")]
    partial class InitCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("PrimaryEmailEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryEmailEmailAddress");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.AccountEmailAddress", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.HasKey("EmailAddress");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountEmailAddresses");
                });

            modelBuilder.Entity("Domain.Entities.AuthToken", b =>
                {
                    b.Property<string>("TokenString")
                        .HasColumnType("text");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TokenString");

                    b.HasIndex("AccountId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("Domain.Entities.Claim", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("AccountId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerificationToken", b =>
                {
                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress1")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("VerificationToken");

                    b.HasIndex("EmailAddress1");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("Domain.Entities.PasswordCredential", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<int>("PasswordHashingAlgorithm")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.ToTable("PasswordCredentials");
                });

            modelBuilder.Entity("Domain.Entities.PasswordResetToken", b =>
                {
                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PasswordCredentialAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("ResetToken");

                    b.HasIndex("PasswordCredentialAccountId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.AccountEmailAddress", "PrimaryEmail")
                        .WithMany()
                        .HasForeignKey("PrimaryEmailEmailAddress");
                });

            modelBuilder.Entity("Domain.Entities.AccountEmailAddress", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany("Emails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.AuthToken", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AuthTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.Claim", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany("Claims")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.EmailVerificationToken", b =>
                {
                    b.HasOne("Domain.Entities.AccountEmailAddress", "EmailAddress")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("EmailAddress1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.PasswordCredential", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("PasswordCredential")
                        .HasForeignKey("Domain.Entities.PasswordCredential", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("Domain.Entities.PasswordCredential", null)
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("PasswordCredentialAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
